{"version":3,"sources":["components/PodcastImage.js","components/SearchResultItemCard.js","components/PodcastSkeleton.js","components/SearchForm.js","components/SearchPage.js","constants/global.js","App.js","reportWebVitals.js","index.js","constants/brand.js"],"names":["IMAGE_URL","PodcastImage","splittedUrl","src","split","correctedPath","SearchResultItemCard","podcast","category","categories","map","name","join","expert","experts","length","border","as","borderRadius","my","overflow","borderWidth","image","uri","p","bg","textTransform","fontSize","fontWeight","lineHeight","color","mt","firstName","lastName","title","company","PodcastSkeleton","height","SearchForm","debouncedChangeHandler","id","onChange","placeholder","PODCASTS","gql","SearchPage","useState","query","setQuery","filteredData","setFilteredData","filtering","setFiltering","changeHandler","event","target","value","useMemo","debounce","useQuery","loading","error","data","useEffect","contentCards","edges","setTimeout","filter","toLowerCase","includes","minHeight","maxW","mx","Array","fill","_","i","index","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","cache","InMemoryCache","theme","extendTheme","colors","brand","primary","secondary","darkTeal","darkTealSecondary","tigerhallTeal","lightTeal","grayTeal","lightGrayTeal","highlightGrayTeal","whiteTeal","popTeal","tigerhallOrange","paleOrange","black","lightBlack","gray","fonts","heading","body","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2f1e42e3.chunk.js","sourcesContent":["import React from \"react\";\nimport { Image } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\n\nPodcastImage.propTypes = {\n  src: PropTypes.string,\n};\n\nconst IMAGE_URL = \"https://static.tigerhall.com\";\nconst IMAGE_SIZE = \"250X\";\n\nexport default function PodcastImage({ src }) {\n  // I'm not sure if I have to make the image size fixed or flexible\n  const splittedUrl = src.split(IMAGE_URL);\n  const correctedPath = `${IMAGE_URL}/resize/${IMAGE_SIZE}${splittedUrl[1]}`;\n\n  // TODO: Add image loading skeleton while the image loads\n\n  return <Image src={correctedPath} />;\n}\n","import React from \"react\";\nimport { Box, Text } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport PodcastImage from \"./PodcastImage\";\n\nSearchResultItemCard.propTypes = {\n  podcast: PropTypes.any,\n};\n\nexport default function SearchResultItemCard({ podcast }) {\n  // If there are more than one category, just concatenate them with comma\n  const category = podcast.categories\n    ?.map((category) => category.name)\n    .join(\", \");\n\n  // since experts is array, there can be more than 1 expert.\n  // but in this can we can just take the first expert\n  const expert = podcast.experts?.length > 0 ? podcast.experts[0] : null;\n\n  return (\n    <Box\n      border=\"none\"\n      as=\"article\"\n      borderRadius=\"lg\"\n      my=\"4\"\n      overflow=\"hidden\"\n      borderWidth=\"1px\"\n    >\n      {/* <Image src=\"https://bit.ly/2k1H1t6\" /> */}\n      <PodcastImage src={podcast.image?.uri} />\n      <Box p=\"3\" bg=\"white\">\n        <Text\n          as=\"strong\"\n          textTransform=\"uppercase\"\n          fontSize=\"sm\"\n          fontWeight=\"semibold\"\n          lineHeight=\"4\"\n          color=\"brand.secondary\"\n        >\n          {category}\n        </Text>\n        <Text mt={2} fontSize=\"md\" fontWeight=\"bold\" lineHeight=\"short\">\n          {podcast.name}\n        </Text>\n        <Text\n          fontWeight=\"bold\"\n          mt={1}\n        >{`${expert.firstName} ${expert.lastName}`}</Text>\n        <Text\n          fontSize=\"xs\"\n          textTransform=\"uppercase\"\n          color=\"black\"\n          fontWeight=\"semibold\"\n        >\n          {expert.title}\n        </Text>\n        <Text color=\"brand.secondary\" fontSize=\"sm\" fontWeight=\"semibold\">\n          {expert.company}\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box, Stack, Skeleton } from \"@chakra-ui/react\";\n\nexport default function PodcastSkeleton() {\n  return (\n    <Box\n      borderRadius=\"lg\"\n      my=\"4\"\n      overflow=\"hidden\"\n      borderWidth=\"1px\"\n      border=\"none\"\n      bg=\"white\"\n    >\n      <Stack>\n        <Skeleton height=\"150px\" />\n        <Box p=\"5\">\n          <Skeleton height=\"20px\" />\n          <Skeleton height=\"40px\" my=\"2\" />\n          <Skeleton height=\"20px\" />\n        </Box>\n      </Stack>\n    </Box>\n  );\n}\n","import { FormControl, FormLabel, Input } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nSearchForm.propTypes = {\n  debouncedChangeHandler: PropTypes.func,\n};\n\nexport default function SearchForm({ debouncedChangeHandler }) {\n  return (\n    <FormControl id=\"search\">\n      <FormLabel color=\"white\">Search</FormLabel>\n      <Input\n        onChange={debouncedChangeHandler}\n        fontSize=\"16\"\n        color=\"white\"\n        borderWidth=\"0\"\n        bg=\"brand.primary\"\n        placeholder=\"Type any keyword\"\n      />\n    </FormControl>\n  );\n}\n","import { Box, Container, Text, Center } from \"@chakra-ui/react\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport SearchResultItemCard from \"./SearchResultItemCard\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport PodcastSkeleton from \"./PodcastSkeleton\";\nimport SearchForm from \"./SearchForm\";\nimport debounce from \"lodash.debounce\";\nimport { DEBOUNCE_TIME } from \"../constants/global\";\n\n// moved this outside to prevent its creation on rerender\nconst PODCASTS = gql`\n  {\n    contentCards(filter: { limit: 20, keywords: \"\", types: [PODCAST] }) {\n      edges {\n        ... on Podcast {\n          name\n          image {\n            ...Image\n          }\n          categories {\n            ...Category\n          }\n          experts {\n            ...Expert\n          }\n        }\n      }\n    }\n  }\n\n  fragment Image on Image {\n    uri\n  }\n\n  fragment Category on Category {\n    name\n  }\n\n  fragment Expert on Expert {\n    firstName\n    lastName\n    title\n    company\n  }\n`;\n\nexport default function SearchPage() {\n  // local states\n  const [query, setQuery] = useState(\"\");\n  const [filteredData, setFilteredData] = useState([]);\n  const [filtering, setFiltering] = useState(false);\n\n  const changeHandler = (event) => {\n    setQuery(event.target.value);\n  };\n\n  // use useMemo to cache the output\n  // set debounce to 300ms\n  const debouncedChangeHandler = useMemo(() => {\n    return debounce(changeHandler, DEBOUNCE_TIME);\n  }, []);\n\n  // make a call to gql endpoint\n  const { loading, error, data } = useQuery(PODCASTS);\n\n  // Instead of overriding data, we create filteredData and copy data to it\n  // so that we can filter the original data with query\n  useEffect(() => {\n    setFilteredData(data?.contentCards?.edges);\n  }, [data]);\n\n  // make client side search on input change\n  // Added 1 sec delay to show loading while filtering\n  useEffect(() => {\n    setFiltering(true);\n    setTimeout(() => {\n      if (query !== \"\") {\n        setFilteredData(\n          data?.contentCards?.edges?.filter((podcast) => {\n            return podcast?.name.toLowerCase().includes(query.toLowerCase());\n          })\n        );\n      } else setFilteredData(data?.contentCards?.edges);\n\n      setFiltering(false);\n    }, 1000);\n  }, [query, setQuery]);\n\n  return (\n    <Container bg=\"brand.darkTeal\" height=\"100%\" minHeight=\"100vh\">\n      <Box maxW=\"400\" p=\"10\" mx=\"auto\">\n        <SearchForm debouncedChangeHandler={debouncedChangeHandler} />\n\n        {error && (\n          <Center my=\"5\">\n            <Text\n              as=\"strong\"\n              textTransform=\"uppercase\"\n              fontSize=\"sm\"\n              fontWeight=\"semibold\"\n              lineHeight=\"4\"\n              color=\"red\"\n            >\n              Error loading podcasts\n            </Text>\n          </Center>\n        )}\n\n        {(loading || filtering) &&\n          Array(5)\n            .fill(null)\n            .map((_, i) => <PodcastSkeleton key={i} />)}\n\n        {!loading &&\n          filteredData?.length > 0 &&\n          filteredData.map((podcast, index) => (\n            <SearchResultItemCard key={index} podcast={podcast} />\n          ))}\n\n        {query !== \"\" && filteredData?.length === 0 && (\n          <Center my=\"5\">\n            <Text as=\"strong\" fontWeight=\"semibold\" lineHeight=\"4\" color=\"red\">\n              There are no matches for your query\n            </Text>\n          </Center>\n        )}\n      </Box>\n    </Container>\n  );\n}\n","export const DEBOUNCE_TIME = 300;\n","import React from \"react\";\nimport SearchPage from \"./components/SearchPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BRAND_COLORS } from \"./constants/brand\";\nimport \"@fontsource/poppins/200.css\";\nimport \"@fontsource/poppins/400.css\";\nimport \"@fontsource/poppins/500.css\";\nimport \"@fontsource/poppins/600.css\";\nimport \"@fontsource/poppins/700.css\";\nimport \"@fontsource/poppins/800.css\";\nimport \"@fontsource/poppins/900.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.staging.tigerhall.io/graphql\",\n  cache: new InMemoryCache(),\n});\n\nconst theme = extendTheme(BRAND_COLORS);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const BRAND_COLORS = {\n  colors: {\n    brand: {\n      primary: \"#003238\",\n      secondary: \"#ff8615\",\n      darkTeal: \"#001315\",\n      darkTealSecondary: \"#001f24\",\n      tigerhallTeal: \"#003238\",\n      lightTeal: \"#075e69\",\n      grayTeal: \"#2e4d50\",\n      lightGrayTeal: \"#35595d\",\n      highlightGrayTeal: \"#5d8180\",\n      whiteTeal: \"#bdd4d6\",\n      popTeal: \"#00f4c5\",\n      tigerhallOrange: \"#ff8615\",\n      paleOrange: \"#ff8615\",\n      black: \"#000000\",\n      lightBlack: \"#333333\",\n      gray: \"#989898\",\n    },\n  },\n  fonts: {\n    heading: \"Poppins\",\n    body: \"Poppins\",\n  },\n};\n"],"sourceRoot":""}